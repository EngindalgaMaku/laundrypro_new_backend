// LaundryPro Cleaning Management System
// Prisma Schema for MySQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users table for authentication and user management
model User {
  id           String   @id @default(cuid())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  role         UserRole @default(EMPLOYEE)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  assignedOrders      Order[]              @relation("AssignedUser")
  statusChanges       OrderStatusHistory[]
  driverRoutes        DeliveryRoute[]
  notificationChanges NotificationLog[]

  @@map("users")
}

// Business settings table
model BusinessSetting {
  id           String       @id @default(cuid())
  businessName String       @map("business_name") @db.VarChar(255)
  businessType BusinessType @map("business_type")
  address      String?      @db.Text
  phone        String?      @db.VarChar(20)
  email        String?      @db.VarChar(255)
  website      String?      @db.VarChar(255)
  taxNumber    String?      @map("tax_number") @db.VarChar(50)
  currency     String       @default("TRY") @db.VarChar(3)
  timezone     String       @default("Europe/Istanbul") @db.VarChar(50)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("business_settings")
}

// Customers table
model Customer {
  id           String       @id @default(cuid())
  firstName    String       @map("first_name") @db.VarChar(100)
  lastName     String       @map("last_name") @db.VarChar(100)
  email        String?      @db.VarChar(255)
  phone        String       @db.VarChar(20)
  whatsapp     String?      @db.VarChar(20)
  address      String?      @db.Text
  latitude     Decimal?     @db.Decimal(10, 8)
  longitude    Decimal?     @db.Decimal(11, 8)
  notes        String?      @db.Text
  customerType CustomerType @default(INDIVIDUAL) @map("customer_type")
  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  orders           Order[]
  notificationLogs NotificationLog[]

  @@map("customers")
}

// Services table
model Service {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  basePrice   Decimal   @map("base_price") @db.Decimal(10, 2)
  unit        Unit      @default(PIECE)
  category    String?   @db.VarChar(100)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  orderItems OrderItem[]

  @@map("services")
}

// Orders table
model Order {
  id                   String        @id @default(cuid())
  orderNumber          String        @unique @map("order_number") @db.VarChar(50)
  customerId           String        @map("customer_id")
  assignedUserId       String?       @map("assigned_user_id")
  status               OrderStatus   @default(PENDING)
  priority             Priority      @default(NORMAL)
  pickupDate           DateTime?     @map("pickup_date") @db.Date
  pickupTime           DateTime?     @map("pickup_time") @db.Time
  deliveryDate         DateTime?     @map("delivery_date") @db.Date
  deliveryTime         DateTime?     @map("delivery_time") @db.Time
  pickupAddress        String?       @map("pickup_address") @db.Text
  deliveryAddress      String?       @map("delivery_address") @db.Text
  subtotal             Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount            Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount       Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount          Decimal       @default(0) @map("total_amount") @db.Decimal(10, 2)
  paymentStatus        PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod        String?       @map("payment_method") @db.VarChar(50)
  notes                String?       @db.Text
  specialInstructions  String?       @map("special_instructions") @db.Text
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  // Relations
  customer         Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  assignedUser     User?                @relation("AssignedUser", fields: [assignedUserId], references: [id])
  orderItems       OrderItem[]
  statusHistory    OrderStatusHistory[]
  payments         Payment[]
  notificationLogs NotificationLog[]
  routeStops       RouteStop[]

  @@map("orders")
}

// Order items table
model OrderItem {
  id         String   @id @default(cuid())
  orderId    String   @map("order_id")
  serviceId  String   @map("service_id")
  quantity   Decimal  @db.Decimal(10, 2)
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  notes      String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

// Order status history table
model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String      @map("order_id")
  status    OrderStatus
  changedBy String?     @map("changed_by")
  notes     String?     @db.Text
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [changedBy], references: [id])

  @@map("order_status_history")
}

// Payments table
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @map("order_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod String        @map("payment_method") @db.VarChar(50)
  paymentStatus PaymentStatus @default(COMPLETED) @map("payment_status")
  transactionId String?       @map("transaction_id") @db.VarChar(255)
  notes         String?       @db.Text
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Notification templates table
model NotificationTemplate {
  id              String        @id @default(cuid())
  name            String        @db.VarChar(255)
  type            NotificationType
  triggerEvent    TriggerEvent  @map("trigger_event")
  subject         String?       @db.VarChar(255)
  templateContent String        @map("template_content") @db.Text
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  notificationLogs NotificationLog[]

  @@map("notification_templates")
}

// Notification logs table
model NotificationLog {
  id           String                @id @default(cuid())
  orderId      String?               @map("order_id")
  customerId   String?               @map("customer_id")
  templateId   String?               @map("template_id")
  type         NotificationType
  recipient    String                @db.VarChar(255)
  subject      String?               @db.VarChar(255)
  content      String?               @db.Text
  status       NotificationStatus    @default(PENDING)
  sentAt       DateTime?             @map("sent_at")
  errorMessage String?               @map("error_message") @db.Text
  createdAt    DateTime              @default(now()) @map("created_at")

  // Relations
  order    Order?               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer Customer?            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  template NotificationTemplate? @relation(fields: [templateId], references: [id])
  user     User?                @relation(fields: [customerId], references: [id])

  @@map("notification_logs")
}

// Delivery routes table
model DeliveryRoute {
  id                String      @id @default(cuid())
  name              String      @db.VarChar(255)
  driverId          String?     @map("driver_id")
  routeDate         DateTime    @map("route_date") @db.Date
  status            RouteStatus @default(PLANNED)
  totalDistance     Decimal?    @map("total_distance") @db.Decimal(10, 2)
  estimatedDuration Int?        @map("estimated_duration") // in minutes
  actualDuration    Int?        @map("actual_duration") // in minutes
  notes             String?     @db.Text
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  driver User?       @relation(fields: [driverId], references: [id])
  stops  RouteStop[]

  @@map("delivery_routes")
}

// Route stops table
model RouteStop {
  id              String    @id @default(cuid())
  routeId         String    @map("route_id")
  orderId         String    @map("order_id")
  stopOrder       Int       @map("stop_order")
  stopType        StopType  @map("stop_type")
  address         String    @db.Text
  latitude        Decimal?  @db.Decimal(10, 8)
  longitude       Decimal?  @db.Decimal(11, 8)
  estimatedArrival DateTime? @map("estimated_arrival") @db.Time
  actualArrival   DateTime? @map("actual_arrival") @db.Time
  status          StopStatus @default(PENDING)
  notes           String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  route DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  order Order        @relation(fields: [orderId], references: [id])

  @@map("route_stops")
}

// Enums
enum UserRole {
  ADMIN    @map("admin")
  MANAGER  @map("manager")
  EMPLOYEE @map("employee")
  DRIVER   @map("driver")
}

enum BusinessType {
  LAUNDRY         @map("laundry")
  DRY_CLEANING    @map("dry_cleaning")
  CARPET_CLEANING @map("carpet_cleaning")
  HOUSE_CLEANING  @map("house_cleaning")
  CAR_WASH        @map("car_wash")
  OTHER           @map("other")
}

enum CustomerType {
  INDIVIDUAL @map("individual")
  CORPORATE  @map("corporate")
}

enum Unit {
  PIECE @map("piece")
  KG    @map("kg")
  SQM   @map("sqm")
  HOUR  @map("hour")
}

enum OrderStatus {
  PENDING     @map("pending")
  CONFIRMED   @map("confirmed")
  IN_PROGRESS @map("in_progress")
  READY       @map("ready")
  DELIVERED   @map("delivered")
  CANCELLED   @map("cancelled")
}

enum Priority {
  LOW    @map("low")
  NORMAL @map("normal")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum PaymentStatus {
  PENDING  @map("pending")
  PARTIAL  @map("partial")
  PAID     @map("paid")
  REFUNDED @map("refunded")
}

enum NotificationType {
  EMAIL    @map("email")
  SMS      @map("sms")
  WHATSAPP @map("whatsapp")
}

enum TriggerEvent {
  ORDER_CREATED         @map("order_created")
  ORDER_CONFIRMED       @map("order_confirmed")
  PICKUP_SCHEDULED      @map("pickup_scheduled")
  IN_PROGRESS           @map("in_progress")
  READY_FOR_DELIVERY    @map("ready_for_delivery")
  DELIVERED             @map("delivered")
  PAYMENT_RECEIVED      @map("payment_received")
}

enum NotificationStatus {
  PENDING   @map("pending")
  SENT      @map("sent")
  FAILED    @map("failed")
  DELIVERED @map("delivered")
}

enum RouteStatus {
  PLANNED     @map("planned")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
}

enum StopType {
  PICKUP   @map("pickup")
  DELIVERY @map("delivery")
}

enum StopStatus {
  PENDING   @map("pending")
  ARRIVED   @map("arrived")
  COMPLETED @map("completed")
  SKIPPED   @map("skipped")
}
